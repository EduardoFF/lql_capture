
static int
handle_assoc_request(const u_char *p, u_int length)
{
	struct mgmt_body_t pbody;
	int offset = 0;
	int ret;

	// memset(&pbody, 0, sizeof(pbody));

	// if (!TTEST2(*p, IEEE802_11_CAPINFO_LEN + IEEE802_11_LISTENINT_LEN))
	// 	return 0;
	// if (length < IEEE802_11_CAPINFO_LEN + IEEE802_11_LISTENINT_LEN)
	// 	return 0;
	// pbody.capability_info = EXTRACT_LE_16BITS(p);
	// offset += IEEE802_11_CAPINFO_LEN;
	// length -= IEEE802_11_CAPINFO_LEN;
	// pbody.listen_interval = EXTRACT_LE_16BITS(p+offset);
	// offset += IEEE802_11_LISTENINT_LEN;
	// length -= IEEE802_11_LISTENINT_LEN;

	// ret = parse_elements(&pbody, p, offset, length);

	// PRINT_SSID(pbody);
	// PRINT_RATES(pbody);
	return ret;
}

static int
handle_assoc_response(const u_char *p, u_int length)
{
	struct mgmt_body_t pbody;
	int offset = 0;
	int ret;

	// memset(&pbody, 0, sizeof(pbody));

	// if (!TTEST2(*p, IEEE802_11_CAPINFO_LEN + IEEE802_11_STATUS_LEN +
	//     IEEE802_11_AID_LEN))
	// 	return 0;
	// if (length < IEEE802_11_CAPINFO_LEN + IEEE802_11_STATUS_LEN +
	//     IEEE802_11_AID_LEN)
	// 	return 0;
	// pbody.capability_info = EXTRACT_LE_16BITS(p);
	// offset += IEEE802_11_CAPINFO_LEN;
	// length -= IEEE802_11_CAPINFO_LEN;
	// pbody.status_code = EXTRACT_LE_16BITS(p+offset);
	// offset += IEEE802_11_STATUS_LEN;
	// length -= IEEE802_11_STATUS_LEN;
	// pbody.aid = EXTRACT_LE_16BITS(p+offset);
	// offset += IEEE802_11_AID_LEN;
	// length -= IEEE802_11_AID_LEN;

	// ret = parse_elements(&pbody, p, offset, length);

	// printf(" AID(%x) :%s: %s", ((u_int16_t)(pbody.aid << 2 )) >> 2 ,
	//     CAPABILITY_PRIVACY(pbody.capability_info) ? " PRIVACY " : "",
	//     (pbody.status_code < NUM_STATUSES
	// 	? status_text[pbody.status_code]
	// 	: "n/a"));

	return ret;
}

static int
handle_reassoc_request(const u_char *p, u_int length)
{
	struct mgmt_body_t pbody;
	int offset = 0;
	int ret;

	// memset(&pbody, 0, sizeof(pbody));

	// if (!TTEST2(*p, IEEE802_11_CAPINFO_LEN + IEEE802_11_LISTENINT_LEN +
	//     IEEE802_11_AP_LEN))
	// 	return 0;
	// if (length < IEEE802_11_CAPINFO_LEN + IEEE802_11_LISTENINT_LEN +
	//     IEEE802_11_AP_LEN)
	// 	return 0;
	// pbody.capability_info = EXTRACT_LE_16BITS(p);
	// offset += IEEE802_11_CAPINFO_LEN;
	// length -= IEEE802_11_CAPINFO_LEN;
	// pbody.listen_interval = EXTRACT_LE_16BITS(p+offset);
	// offset += IEEE802_11_LISTENINT_LEN;
	// length -= IEEE802_11_LISTENINT_LEN;
	// memcpy(&pbody.ap, p+offset, IEEE802_11_AP_LEN);
	// offset += IEEE802_11_AP_LEN;
	// length -= IEEE802_11_AP_LEN;

	// ret = parse_elements(&pbody, p, offset, length);

	// PRINT_SSID(pbody);
	// printf(" AP : %s", etheraddr_string( pbody.ap ));

	return ret;
}

static int
handle_reassoc_response(const u_char *p, u_int length)
{
	/* Same as a Association Reponse */
	return handle_assoc_response(p, length);
}

static int
handle_probe_request(const u_char *p, u_int length)
{
	struct mgmt_body_t  pbody;
	int offset = 0;
	int ret;

	// memset(&pbody, 0, sizeof(pbody));

	// ret = parse_elements(&pbody, p, offset, length);

	// PRINT_SSID(pbody);
	// PRINT_RATES(pbody);

	return ret;
}

static int
handle_probe_response(const u_char *p, u_int length)
{
	struct mgmt_body_t  pbody;
	int offset = 0;
	int ret;

	// memset(&pbody, 0, sizeof(pbody));

	// if (!TTEST2(*p, IEEE802_11_TSTAMP_LEN + IEEE802_11_BCNINT_LEN +
	//     IEEE802_11_CAPINFO_LEN))
	// 	return 0;
	// if (length < IEEE802_11_TSTAMP_LEN + IEEE802_11_BCNINT_LEN +
	//     IEEE802_11_CAPINFO_LEN)
	// 	return 0;
	// memcpy(&pbody.timestamp, p, IEEE802_11_TSTAMP_LEN);
	// offset += IEEE802_11_TSTAMP_LEN;
	// length -= IEEE802_11_TSTAMP_LEN;
	// pbody.beacon_interval = EXTRACT_LE_16BITS(p+offset);
	// offset += IEEE802_11_BCNINT_LEN;
	// length -= IEEE802_11_BCNINT_LEN;
	// pbody.capability_info = EXTRACT_LE_16BITS(p+offset);
	// offset += IEEE802_11_CAPINFO_LEN;
	// length -= IEEE802_11_CAPINFO_LEN;

	// ret = parse_elements(&pbody, p, offset, length);

	// PRINT_SSID(pbody);
	// PRINT_RATES(pbody);
	// PRINT_DS_CHANNEL(pbody);

	return ret;
}

static int
handle_atim(void)
{
	/* the frame body for ATIM is null. */
	return 1;
}

static int
handle_disassoc(const u_char *p, u_int length)
{
	struct mgmt_body_t  pbody;

	// memset(&pbody, 0, sizeof(pbody));

	// if (!TTEST2(*p, IEEE802_11_REASON_LEN))
	// 	return 0;
	// if (length < IEEE802_11_REASON_LEN)
	// 	return 0;
	// pbody.reason_code = EXTRACT_LE_16BITS(p);

	// printf(": %s",
	//     (pbody.reason_code < NUM_REASONS)
	// 	? reason_text[pbody.reason_code]
	// 	: "Reserved" );

	return 1;
}

static int
handle_auth(const u_char *p, u_int length)
{
	struct mgmt_body_t  pbody;
	int offset = 0;
	int ret;

	// memset(&pbody, 0, sizeof(pbody));

	// if (!TTEST2(*p, 6))
	// 	return 0;
	// if (length < 6)
	// 	return 0;
	// pbody.auth_alg = EXTRACT_LE_16BITS(p);
	// offset += 2;
	// length -= 2;
	// pbody.auth_trans_seq_num = EXTRACT_LE_16BITS(p + offset);
	// offset += 2;
	// length -= 2;
	// pbody.status_code = EXTRACT_LE_16BITS(p + offset);
	// offset += 2;
	// length -= 2;

	// ret = parse_elements(&pbody, p, offset, length);

	// if ((pbody.auth_alg == 1) &&
	//     ((pbody.auth_trans_seq_num == 2) ||
	//      (pbody.auth_trans_seq_num == 3))) {
	// 	printf(" (%s)-%x [Challenge Text] %s",
	// 	    (pbody.auth_alg < NUM_AUTH_ALGS)
	// 		? auth_alg_text[pbody.auth_alg]
	// 		: "Reserved",
	// 	    pbody.auth_trans_seq_num,
	// 	    ((pbody.auth_trans_seq_num % 2)
	// 	        ? ((pbody.status_code < NUM_STATUSES)
	// 		       ? status_text[pbody.status_code]
	// 		       : "n/a") : ""));
	// 	return ret;
	// }
	// printf(" (%s)-%x: %s",
	//     (pbody.auth_alg < NUM_AUTH_ALGS)
	// 	? auth_alg_text[pbody.auth_alg]
	// 	: "Reserved",
	//     pbody.auth_trans_seq_num,
	//     (pbody.auth_trans_seq_num % 2)
	//         ? ((pbody.status_code < NUM_STATUSES)
	// 	    ? status_text[pbody.status_code]
	//             : "n/a")
	//         : "");

	return ret;
}

static int
handle_deauth(const struct mgmt_header_t *pmh, const u_char *p, u_int length)
{
	struct mgmt_body_t  pbody;
	int offset = 0;
	const char *reason = NULL;

	// memset(&pbody, 0, sizeof(pbody));

	// if (!TTEST2(*p, IEEE802_11_REASON_LEN))
	// 	return 0;
	// if (length < IEEE802_11_REASON_LEN)
	// 	return 0;
	// pbody.reason_code = EXTRACT_LE_16BITS(p);
	// offset += IEEE802_11_REASON_LEN;
	// length -= IEEE802_11_REASON_LEN;

	// reason = (pbody.reason_code < NUM_REASONS)
	// 		? reason_text[pbody.reason_code]
	// 		: "Reserved";

	// if (eflag) {
	// 	printf(": %s", reason);
	// } else {
	// 	printf(" (%s): %s", etheraddr_string(pmh->sa), reason);
	// }
	return 1;
}

#define	PRINT_HT_ACTION(v) (\
	(v) == 0 ? printf("TxChWidth") : \
	(v) == 1 ? printf("MIMOPwrSave") : \
		   printf("Act#%d", (v)) \
)
#define	PRINT_BA_ACTION(v) (\
	(v) == 0 ? printf("ADDBA Request") : \
	(v) == 1 ? printf("ADDBA Response") : \
	(v) == 2 ? printf("DELBA") : \
		   printf("Act#%d", (v)) \
)
#define	PRINT_MESHLINK_ACTION(v) (\
	(v) == 0 ? printf("Request") : \
	(v) == 1 ? printf("Report") : \
		   printf("Act#%d", (v)) \
)
#define	PRINT_MESHPEERING_ACTION(v) (\
	(v) == 0 ? printf("Open") : \
	(v) == 1 ? printf("Confirm") : \
	(v) == 2 ? printf("Close") : \
		   printf("Act#%d", (v)) \
)
#define	PRINT_MESHPATH_ACTION(v) (\
	(v) == 0 ? printf("Request") : \
	(v) == 1 ? printf("Report") : \
	(v) == 2 ? printf("Error") : \
	(v) == 3 ? printf("RootAnnouncement") : \
		   printf("Act#%d", (v)) \
)

static int
handle_action(const struct mgmt_header_t *pmh, const u_char *p, u_int length)
{
	// if (!TTEST2(*p, 2))
	// 	return 0;
	// if (length < 2)
	// 	return 0;
	// if (eflag) {
	// 	printf(": ");
	// } else {
	// 	printf(" (%s): ", etheraddr_string(pmh->sa));
	// }
	// switch (p[0]) {
	// case 0: printf("Spectrum Management Act#%d", p[1]); break;
	// case 1: printf("QoS Act#%d", p[1]); break;
	// case 2: printf("DLS Act#%d", p[1]); break;
	// case 3: printf("BA "); PRINT_BA_ACTION(p[1]); break;
	// case 7: printf("HT "); PRINT_HT_ACTION(p[1]); break;
	// case 13: printf("MeshLMetric "); PRINT_MESHLINK_ACTION(p[1]); break;
	// case 15: printf("Interwork Act#%d", p[1]); break;
	// case 16: printf("Resource Act#%d", p[1]); break;
	// case 17: printf("Proxy Act#%d", p[1]); break;
	// case 30: printf("MeshPeering "); PRINT_MESHPEERING_ACTION(p[1]); break;
	// case 32: printf("MeshPath "); PRINT_MESHPATH_ACTION(p[1]); break;
	// case 127: printf("Vendor Act#%d", p[1]); break;
	// default:
	// 	printf("Reserved(%d) Act#%d", p[0], p[1]);
	// 	break;
	// }
	return 1;
}




static int
handle_beacon(const u_char *p, u_int length)
{
	struct mgmt_body_t pbody;
	int offset = 0;
	int ret;

	// memset(&pbody, 0, sizeof(pbody));

	// if (!TTEST2(*p, IEEE802_11_TSTAMP_LEN + IEEE802_11_BCNINT_LEN +
	//     IEEE802_11_CAPINFO_LEN))
	// 	return 0;
	// if (length < IEEE802_11_TSTAMP_LEN + IEEE802_11_BCNINT_LEN +
	//     IEEE802_11_CAPINFO_LEN)
	// 	return 0;
	// memcpy(&pbody.timestamp, p, IEEE802_11_TSTAMP_LEN);
	// offset += IEEE802_11_TSTAMP_LEN;
	// length -= IEEE802_11_TSTAMP_LEN;
	// pbody.beacon_interval = EXTRACT_LE_16BITS(p+offset);
	// offset += IEEE802_11_BCNINT_LEN;
	// length -= IEEE802_11_BCNINT_LEN;
	// pbody.capability_info = EXTRACT_LE_16BITS(p+offset);
	// offset += IEEE802_11_CAPINFO_LEN;
	// length -= IEEE802_11_CAPINFO_LEN;

	// ret = parse_elements(&pbody, p, offset, length);

	// PRINT_SSID(pbody);
	// PRINT_RATES(pbody);
	// printf(" %s",
	//     CAPABILITY_ESS(pbody.capability_info) ? "ESS" : "IBSS");
	// PRINT_DS_CHANNEL(pbody);

	return ret;
}


static int
extract_header_length(u_int16_t fc)
{
	int len;

	switch (FC_TYPE(fc)) {
	case T_MGMT:
		return MGMT_HDRLEN;
	case T_CTRL:
		switch (FC_SUBTYPE(fc)) {
		case CTRL_BAR:
			return CTRL_BAR_HDRLEN;
		case CTRL_PS_POLL:
			return CTRL_PS_POLL_HDRLEN;
		case CTRL_RTS:
			return CTRL_RTS_HDRLEN;
		case CTRL_CTS:
			return CTRL_CTS_HDRLEN;
		case CTRL_ACK:
			return CTRL_ACK_HDRLEN;
		case CTRL_CF_END:
			return CTRL_END_HDRLEN;
		case CTRL_END_ACK:
			return CTRL_END_ACK_HDRLEN;
		default:
			return 0;
		}
	case T_DATA:
		len = (FC_TO_DS(fc) && FC_FROM_DS(fc)) ? 30 : 24;
		if (DATA_FRAME_IS_QOS(FC_SUBTYPE(fc)))
			len += 2;
		return len;
	default:
		printf("unknown IEEE802.11 frame type (%d)", FC_TYPE(fc));
		return 0;
	}
}

static int
extract_mesh_header_length(const u_char *p)
{
	return (p[0] &~ 3) ? 0 : 6*(1 + (p[0] & 3));
}


static void
ieee_802_11_hdr_print(u_int16_t fc, const u_char *p, u_int hdrlen,
    u_int meshdrlen, const u_int8_t **srcp, const u_int8_t **dstp)
{
	// if (vflag) {
	// 	if (FC_MORE_DATA(fc))
	// 		printf("More Data ");
	// 	if (FC_MORE_FLAG(fc))
	// 		printf("More Fragments ");
	// 	if (FC_POWER_MGMT(fc))
	// 		printf("Pwr Mgmt ");
	// 	if (FC_RETRY(fc))
	// 		printf("Retry ");
	// 	if (FC_ORDER(fc))
	// 		printf("Strictly Ordered ");
	// 	if (FC_WEP(fc))
	// 		printf("WEP Encrypted ");
	// 	if (FC_TYPE(fc) != T_CTRL || FC_SUBTYPE(fc) != CTRL_PS_POLL)
	// 		printf("%dus ",
	// 		    EXTRACT_LE_16BITS(
	// 		        &((const struct mgmt_header_t *)p)->duration));
	// }
	// if (meshdrlen != 0) {
	// 	const struct meshcntl_t *mc =
	// 	    (const struct meshcntl_t *)&p[hdrlen - meshdrlen];
	// 	int ae = mc->flags & 3;

	// 	printf("MeshData (AE %d TTL %u seq %u", ae, mc->ttl,
	// 	    EXTRACT_LE_32BITS(mc->seq));
	// 	if (ae > 0)
	// 		printf(" A4:%s", etheraddr_string(mc->addr4));
	// 	if (ae > 1)
	// 		printf(" A5:%s", etheraddr_string(mc->addr5));
	// 	if (ae > 2)
	// 		printf(" A6:%s", etheraddr_string(mc->addr6));
	// 	printf(") ");
	// }

	// switch (FC_TYPE(fc)) {
	// case T_MGMT:
	// 	mgmt_header_print(p, srcp, dstp);
	// 	break;
	// case T_CTRL:
	// 	ctrl_header_print(fc, p, srcp, dstp);
	// 	break;
	// case T_DATA:
	// 	data_header_print(fc, p, srcp, dstp);
	// 	break;
	// default:
	// 	printf("(header) unknown IEEE802.11 frame type (%d)",
	// 	    FC_TYPE(fc));
	// 	*srcp = NULL;
	// 	*dstp = NULL;
	// 	break;
	// }
}


static int
mgmt_body_print(u_int16_t fc, const struct mgmt_header_t *pmh,
    const u_char *p, u_int length)
{
  uint16_t st = FC_SUBTYPE(fc);
  printf("fc %d subtype %d\n", (int) fc, (int) st);
	switch (FC_SUBTYPE(fc)) {
	case ST_ASSOC_REQUEST:
		printf("Assoc Request");
		return handle_assoc_request(p, length);
	case ST_ASSOC_RESPONSE:
		printf("Assoc Response");
		return handle_assoc_response(p, length);
	case ST_REASSOC_REQUEST:
		printf("ReAssoc Request");
		return handle_reassoc_request(p, length);
	case ST_REASSOC_RESPONSE:
		printf("ReAssoc Response");
		return handle_reassoc_response(p, length);
	case ST_PROBE_REQUEST:
		printf("Probe Request");
		return handle_probe_request(p, length);
	case ST_PROBE_RESPONSE:
		printf("Probe Response");
		return handle_probe_response(p, length);
	case ST_BEACON:
		printf("Beacon");
		return handle_beacon(p, length);
	case ST_ATIM:
		printf("ATIM");
		return handle_atim();
	case ST_DISASSOC:
		printf("Disassociation");
		return handle_disassoc(p, length);
	case ST_AUTH:
		printf("Authentication");
		// if (!TTEST2(*p, 3))
		// 	return 0;
		// if ((p[0] == 0 ) && (p[1] == 0) && (p[2] == 0)) {
		// 	printf("Authentication (Shared-Key)-3 ");
		// 	return wep_print(p);
		// }
		return handle_auth(p, length);
	case ST_DEAUTH:
		printf("DeAuthentication");
		return handle_deauth(pmh, p, length);
		break;
	case ST_ACTION:
		printf("Action");
		return handle_action(pmh, p, length);
		break;
	default:
		printf("Unhandled Management subtype(%x)",
		    FC_SUBTYPE(fc));
		return 1;
	}
}
#ifndef roundup2
#define	roundup2(x, y)	(((x)+((y)-1))&(~((y)-1))) /* if y is powers of two */
#endif




static u_int
ieee802_11_print(const u_char *p, u_int length, u_int orig_caplen, int pad,
    u_int fcslen)
{
  printf("80211 print %d %d %d %d\n",
	 length,orig_caplen,pad,fcslen);
	u_int16_t fc;
	u_int caplen, hdrlen, meshdrlen;
	const u_int8_t *src, *dst;
	u_short extracted_ethertype;

	caplen = orig_caplen;
	/* Remove FCS, if present */
	if (length < fcslen) {
		printf("[|802.11]");
		return caplen;
	}
	length -= fcslen;
	if (caplen > length) {
		/* Amount of FCS in actual packet data, if any */
		fcslen = caplen - length;
		caplen -= fcslen;
		// snapend -= fcslen;
	}

	if (caplen < IEEE802_11_FC_LEN) {
		printf("[|802.11]");
		return orig_caplen;
	}

	fc = EXTRACT_LE_16BITS(p);
	printf("%02x %02x\n", p[0], p[1]);
	hdrlen = extract_header_length(fc);
	if (pad)
		hdrlen = roundup2(hdrlen, 4);
	if (FC_TYPE(fc) == T_DATA && DATA_FRAME_IS_QOS(FC_SUBTYPE(fc))) {
		meshdrlen = extract_mesh_header_length(p+hdrlen);
		hdrlen += meshdrlen;
	} else
		meshdrlen = 0;


	if (caplen < hdrlen) {
		printf("[|802.11]");
		return hdrlen;
	}

	ieee_802_11_hdr_print(fc, p, hdrlen, meshdrlen, &src, &dst);

	/*
	 * Go past the 802.11 header.
	 */
	length -= hdrlen;
	caplen -= hdrlen;
	p += hdrlen;
	printf("hdrlen %d\n", hdrlen);

	switch (FC_TYPE(fc)) {
	case T_MGMT:
	  printf("management frame\n");
		if (!mgmt_body_print(fc,
		    (const struct mgmt_header_t *)(p - hdrlen), p, length)) {
			printf("[|802.11]");
			return hdrlen;
		}
		break;
	case T_CTRL:
		// if (!ctrl_body_print(fc, p - hdrlen)) {
		// 	printf("[|802.11]");
		// 	return hdrlen;
		// }
		break;
	case T_DATA:
		// if (DATA_FRAME_IS_NULL(FC_SUBTYPE(fc)))
		// 	return hdrlen;	/* no-data frame */
		// /* There may be a problem w/ AP not having this bit set */
		// if (FC_WEP(fc)) {
		// 	if (!wep_print(p)) {
		// 		printf("[|802.11]");
		// 		return hdrlen;
		// 	}
		// } else if (llc_print(p, length, caplen, dst, src,
		//     &extracted_ethertype) == 0) {
		// 	/*
		// 	 * Some kinds of LLC packet we cannot
		// 	 * handle intelligently
		// 	 */
		// 	if (!eflag)
		// 		ieee_802_11_hdr_print(fc, p - hdrlen, hdrlen,
		// 		    meshdrlen, NULL, NULL);
		// 	if (extracted_ethertype)
		// 		printf("(LLC %s) ",
		// 		    etherproto_string(
		// 		        htons(extracted_ethertype)));
		// 	if (!suppress_default_print)
		// 		default_print(p, caplen);
		// }
		break;
	default:
		printf("unknown 802.11 frame type (%d)", FC_TYPE(fc));
		break;
	}

	return hdrlen;
}


/*
 * This is the top level routine of the printer.  'p' points
 * to the 802.11 header of the packet, 'h->ts' is the timestamp,
 * 'h->len' is the length of the packet off the wire, and 'h->caplen'
 * is the number of bytes actually captured.
 */
u_int
ieee802_11_if_print(const struct pcap_pkthdr *h, const u_char *p)
{
	return ieee802_11_print(p, h->len, h->caplen, 0, 0);
}
